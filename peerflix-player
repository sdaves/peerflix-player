#!/usr/bin/python

import copy
import json
import os
import urllib2
import BeautifulSoup


class WebSearcher:

    def __init__(self, player):
        self.player = player
        self.providers = [
            self.btsn,
            self.tpb,
        ]

    def tpb(self, text):
        results = dict()
        url = "https://the"+"pi"+"rateb"+"ay.se/search/{0}/0/7/100,200"
        soup = self.get_url_soup(url, text)

        root = soup.find(id='searchResult')

        if not root:
            return results

        for item in root.findAll('tr'):
            the_class = item.get('class')
            if the_class == 'header':
                continue
            full_mag = str(
                item.find(
                    title='Download this torrent using magnet',
                ).get('href')
            )
            mag = full_mag.split('btih:')[1].split('&')[0]

            if mag in results:
                continue

            size = item.find('font').text
            size = size.split('Size ')[1].split(',')[0]
            [size, units] = size.split('&nbsp;')
            if units[0] == 'M':
                size = str(float(size)/1024)

            size = size[0:size.index('.')+2]

            results[mag] = dict(
                seeders=int(item.find(align='right').text),
                size=size,
                name=item.find('a', {'class': 'detLink'}).text,
                full_mag=full_mag,
            )

        return results

    def btsn(self, text):
        results = dict()
        url = "http://bi"+"tsno"+"op.com/search/all/{0}/s/d/1/?fmt=rss"
        soup = self.get_url_soup(url, text)

        for item in soup.findAll('item'):
            mag = item.find('infohash').text

            if mag in results:
                continue

            size = str(float(item.find('size').text)/1024/1024/1024)
            size = size[0:size.index('.')+2]

            results[mag] = dict(
                seeders=int(item.find('numseeders').text),
                size=size,
                name=item.find('title').text,
                full_mag=item.find('magneturi').text,
            )

        return results

    def get_url_soup(self, url, text):
        opener = urllib2.build_opener()
        opener.addheaders = [('User-agent', 'Mozilla/5.0')]
        error = False

        try:
            page = opener.open(url.format(urllib2.quote(text))).read()
        except:
            error = True

        if error:
            self.player.show_error('Remote address unavailable.')

        soup = BeautifulSoup.BeautifulSoup(page)

        return soup

    def search_all(self, text):
        found_items = dict()

        for fn in self.providers:
            found_items = dict(found_items.items() + fn(text).items())

        return found_items


class PeerflixPlayer:

    def run(self, cmd, mode='r'):
        return os.popen2(cmd, mode)[1].readlines()

    def dump(self, val):
        print(json.dumps(val))

    def clean_up(self):
        self.run('rm -rfv /tmp/torrent-stream/')

    def get_url(self):
        return ''.join(self.run('xclip -o'))

    def show_downloading_info(self):
        progress = os.popen2([
            'zenity',
            '--progress',
            '--text=Downloading ...',
            '--title=Peerflix Player',
            '--pulsate',
            '--auto-close'
        ], 'w')[0]

        self.activate_progress(progress)

        return progress

    def is_valid_url(self, clip):
        if clip and clip.strip():
            return True

    def show_not_valid_url(self):
        self.run([
            'zenity',
            '--title=Peerflix Player',
            "--text=Please copy a url and restart this program.",
            '--error',
        ])

    def finish_progress(self, progress):
        progress.writelines(['100'])
        progress.close()

    def activate_progress(self, progress):
        progress.writelines(['10'])
        progress.flush()

    def get_choices(self, clip):
        items = self.run(['peerflix', clip, '-l'])

        choices = []

        for item in items:
            val = item.split("[35m")[1].split('\u001b')[0]
            choices.append(val)

        return choices

    def is_valid_file(self, item):
        item = item.lower()
        bad_strings = [
            'sample',
            '.txt',
            '.html',
            '.nfo',
            '.pdf',
            '.sfv',
            '.png',
            '.jpg',
        ]

        for val in bad_strings:
            if val in item:
                return False

        return True

    def clean_choices(self, choices):
        out = []
        for item in choices:
            if self.is_valid_file(item):
                out.append(item)
        return out

    def get_selected(self, choices):
        choices.sort()

        cmd = []
        cmd.extend([
            'zenity',
            '--title=Peerflix Player',
            '--checklist',
            '--height=500',
            '--width=500',
            '--list',
            '--column=Play',
            '--column=Name',
        ])
        is_first = 'TRUE'
        for item in choices:
            cmd.extend([is_first, item])
            is_first = 'FALSE'

        selected = self.run(cmd)

        if len(selected):
            selected.pop()

        return selected

    def play_item(self, clip, choices, choice):
        val = choice
        if val[0] is '|':
            val = val[1:]

        idx = choices.index(val)

        cmd = "peerflix \"{clip}\" -v -i {id} -r".format(
            id=str(idx),
            clip=clip,
        )

        os.system(cmd)

    def get_action(self):
        action = self.run(' '.join([
            'zenity',
            '--entry',
            '--title="Peerflix Player"',
            '--text="Sit back, and relax."',
            '--width=300',
            '--entry-text="Enter Search Term"',
            "'Play clipboard url'",
            "'Quit'",
        ]))

        if len(action):
            return action[0]

    def show_error(self, text):
        self.run([
            'zenity',
            '--error',
            "--text={0}".format(text),
        ])

    def show_processing(self):
        progress = os.popen2([
            'zenity',
            '--title=Peerflix Player',
            '--progress',
            '--text=Processing file ...',
            '--pulsate',
            '--auto-close',
        ], 'w')[0]
        self.activate_progress(progress)

        return progress

    def pick_found_items(self, items):
        cmd = [
            'zenity',
            '--list',
            '--radiolist',
            '--title=Peerflix Player',
            '--text=Which one would you like?',
            '--width=700',
            '--height=500',
            '--column=Item',
            '--column=ID',
            '--column=Peers',
            '--column=GB',
            '--column=Name',
        ]

        idx = 1
        is_first = 'TRUE'

        sorted_items = sorted(
            [(int(value['seeders']), key) for (key, value) in items.items()],
            reverse=True,
        )

        for (seeders, mag) in sorted_items:
            item = items[mag]
            cmd.extend([
                is_first,
                str(idx),
                str(item['seeders']),
                item['size'],
                item['name'],
            ])
            is_first = 'FALSE'
            idx += 1

        selected = self.run(cmd)

        if not selected:
            return

        (seeders, mag) = sorted_items[int(selected[0]) - 1]

        #get full magnet
        return items[mag]['full_mag']

    def main(self):
        self.clean_up()
        clip = ''
        action = self.get_action()

        if not action:
            return

        if 'Play clipboard url' in action:
            clip = self.get_url()
        elif 'Quit' is action:
            return
        else:
            progress = self.show_downloading_info()
            searcher = WebSearcher(self)
            found_items = searcher.search_all(action)
            self.finish_progress(progress)
            if not len(found_items):
                self.show_error('Sorry, but nothing was found.')
                return self.main()
            clip = self.pick_found_items(found_items)
            if not clip:
                return self.main()

        if not self.is_valid_url(clip):
            self.show_not_valid_url()
            return self.main()

        progress = self.show_downloading_info()
        start_choices = self.get_choices(clip)
        choices = copy.copy(start_choices)
        self.finish_progress(progress)
        choices = self.clean_choices(choices)

        if len(choices) is 1:
            selected = choices
        else:
            selected = self.get_selected(choices)

        if not len(selected):
            return self.main()

        progress = self.show_processing()

        for choice in selected:
            self.play_item(clip, start_choices, choice)

if __name__ == '__main__':
    player = PeerflixPlayer()

    try:
        player.main()
    except KeyboardInterrupt, e:
        pass

    player.clean_up()
